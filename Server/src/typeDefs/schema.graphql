type Query {
	welcome: String!
	allUsers: [User!]!
	allTickets: [Ticket!]!
	fetchTicket(id: String!): Ticket!
	allTicketStatus: [Status!]!
	allResolvedTickets: [ResolvedTickets!]!
	ticketSolution(id: ID!): [Solution!]!
	ticketStatus(ticket_id: ID!): Status!
}

type User {
	id: ID
	first_name: String!
	last_name: String!
	email: String!
	phone_number: String
	password: String!
}

type Solution {
	id: ID!
	solution: String!
	ticket_id: ID!
	resolved_by: ID!
}
type Ticket {
	id: ID!
	title: String!
	description: String!
	category: String
	created_at: String!
	# Fix this to not accept id and dynamically return user without accepting the user_id
	created_by: User!
	ticket_status: Status!
}

type AuthPayLoad {
	token: String!
	user: User
}

type ResolvedTickets {
	id: ID!
	solution: String!
	ticket: Ticket!
	resolved_by: User!
}

type Status {
	id: ID!
	state: String
	ticket: Ticket!
}

type DeletedTicket {
	id: ID!
	info: String!
}
type Mutation {
	signup(
		first_name: String!
		last_name: String!
		password: String!
		email: String!
		phone_number: String
	): AuthPayLoad
	login(email: String!, password: String!): AuthPayLoad
	addTicket(title: String!, description: String!, category: String, created_by: String): Ticket!
	solveATicket(solution: String!, ticket_id: ID!, solved_by: ID!): ResolvedTickets!
	deleteTicket(id: ID!): DeletedTicket
	updateTicket(id: ID!, title: String, description: String, category: String): Ticket!
}
